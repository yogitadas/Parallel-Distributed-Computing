#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <math.h>

int is_prime(int n) {
    if (n <= 1) return 0;
    if (n <= 3) return 1;
    if (n % 2 == 0 || n % 3 == 0) return 0;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return 0;
    }
    return 1;
}

int main(int argc, char *argv[]) {
    int rank, size, n = 100, number, result;
    MPI_Status status;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        // Master process
        for (int i = 2; i <= n; i++) {
            MPI_Recv(&result, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);
            MPI_Send(&i, 1, MPI_INT, status.MPI_SOURCE, 0, MPI_COMM_WORLD);
        }

        // Send termination signal (-1)
        for (int i = 1; i < size; i++) {
            MPI_Recv(&result, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);
            MPI_Send(&number, 1, MPI_INT, status.MPI_SOURCE, 1, MPI_COMM_WORLD);
        }

    } else {
        // Worker process
        while (1) {
            MPI_Send(&rank, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
            MPI_Recv(&number, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status);

            if (status.MPI_TAG == 1) {
                break;
            }

            if (is_prime(number)) {
                MPI_Send(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
            } else {
                number = -number;
                MPI_Send(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
            }
        }
    }

    if (rank == 0) {
        printf("Prime number calculation completed.\n");
    }

    MPI_Finalize();
    return 0;
}
