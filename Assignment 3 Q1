#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <omp.h>

#define SIZE 65536  // 2^16

void daxpy(double a, double *X, double *Y, int start, int end) {
    for (int i = start; i < end; i++) {
        X[i] = a * X[i] + Y[i];
    }
}

int main(int argc, char *argv[]) {
    int rank, size;
    double a = 2.5;
    double *X, *Y;
    double start_time, end_time;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    X = (double *)malloc(SIZE * sizeof(double));
    Y = (double *)malloc(SIZE * sizeof(double));

    if (rank == 0) {
        for (int i = 0; i < SIZE; i++) {
            X[i] = 1.0;
            Y[i] = 2.0;
        }
    }

    MPI_Bcast(X, SIZE, MPI_DOUBLE, 0, MPI_COMM_WORLD);
    MPI_Bcast(Y, SIZE, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    int chunk_size = SIZE / size;
    int start = rank * chunk_size;
    int end = (rank == size - 1) ? SIZE : start + chunk_size;

    start_time = MPI_Wtime();
    daxpy(a, X, Y, start, end);
    end_time = MPI_Wtime();

    MPI_Gather(X + start, chunk_size, MPI_DOUBLE, X, chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("DAXPY completed in %f seconds using MPI.\n", end_time - start_time);
    }

    free(X);
    free(Y);
    MPI_Finalize();
    return 0;
}
